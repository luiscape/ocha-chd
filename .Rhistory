}
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
test <- rw.sample(df = population, n = 3)
View(test)
#### Sampling method. ####
# Systematic sampling method on a data.frame.
rw.sample <- function(df = NULL, n = NULL) {
# Creating an `id` column.
id.creator <- function(df = NULL) {
a <- data.frame(1)
for (i in 1:nrow(df)) {
x <- i
a <- rbind(a, x)
}
a <- data.frame(a[1:nrow(a)-1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
a <- data.frame(1)
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
if (((x + n) > nrow(df)) == FALSE) {
x <- x + n
}
if (((x + n) > nrow(df)) == TRUE) {
x <- ((x + n) - nrow(df))
}
a <- rbind(a, x)
}
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
test <- rw.sample(df = population, n = 3)
View(population)
View(test)
#### Sampling method. ####
# Systematic sampling method on a data.frame.
rw.sample <- function(df = NULL, n = NULL) {
# Creating an `id` column.
id.creator <- function(df = NULL) {
a <- data.frame(1)
for (i in 1:nrow(df)) {
x <- i
a <- rbind(a, x)
}
a <- data.frame(a[1:nrow(a)-1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 2:n) {
if (((x + n) > nrow(df)) == FALSE) {
x <- x + n
}
if (((x + n) > nrow(df)) == TRUE) {
x <- ((x + n) - nrow(df))
}
a <- rbind(a, x)
}
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
test <- rw.sample(df = population, n = 3)
View(test)
#### Sampling method. ####
# Systematic sampling method on a data.frame.
rw.sample <- function(df = NULL, n = NULL) {
# Creating an `id` column.
id.creator <- function(df = NULL) {
a <- data.frame(1)
for (i in 1:nrow(df)) {
x <- i
a <- rbind(a, x)
}
a <- data.frame(a[1:nrow(a)-1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
if (((x + n) > nrow(df)) == FALSE) {
x <- x + n
}
if (((x + n) > nrow(df)) == TRUE) {
x <- ((x + n) - nrow(df))
}
a <- rbind(a, x)
}
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
test <- rw.sample(df = population, n = 3)
View(test)
#### Sampling method. ####
# Systematic sampling method on a data.frame. #
# n (sample size) has to provided as a parameter. #
rw.sample <- function(df = NULL, n = NULL) {
# Creating an `id` column.
id.creator <- function(df = NULL) {
a <- data.frame(1)
for (i in 1:nrow(df)) {
x <- i
a <- rbind(a, x)
}
a <- data.frame(a[1:nrow(a)-1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
if (((x + n) > nrow(df)) == FALSE) {
x <- x + n
}
if (((x + n) > nrow(df)) == TRUE) {
x <- ((x + n) - nrow(df))
}
a <- rbind(a, x)
}
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
############### Sampling method. ##################
# Systematic sampling method on a data.frame.     #
# n (sample size) has to provided as a parameter. #
#                                                 #
# Author: Luis Capelo | capelo@un.org             #
#                                                 #
###################################################
rw.sample <- function(df = NULL, n = NULL) {
# Creating an `id` column.
id.creator <- function(df = NULL) {
a <- data.frame(1)
for (i in 1:nrow(df)) {
x <- i
a <- rbind(a, x)
}
a <- data.frame(a[1:nrow(a)-1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
if (((x + n) > nrow(df)) == FALSE) {
x <- x + n
}
if (((x + n) > nrow(df)) == TRUE) {
x <- ((x + n) - nrow(df))
}
a <- rbind(a, x)
}
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
sample.12 <- rw.sample(df = data.12, n = 220)
sample.11 <- rw.sample(df = data.11, n = 220)
sample.10 <- rw.sample(df = data.10, n = 220)
sample.09 <- rw.sample(df = data.09, n = 220)
View(data.10)
View(data.09)
data.09 <- subset(data, year(data$created) == year(dmy("01-01-2009")))
data.09 <- subset(data, year(as.Date(data$created)) == year(dmy("01-01-2009")))
data <- read.csv('data/all-entries.csv')
setwd("~/Documents/Programming/ocha-chd")
data <- read.csv('data/all-entries.csv')
data.09 <- subset(data, year(data$created) == year(dmy("01-01-2009")))
data.09 <- data.09[order(data.09$created),]
View(data.09)
c <- a[1:44195,]
View(c)
sample.10 <- rw.sample(df = data.10, n = 245)
sample.09 <- rw.sample(df = data.09, n = 245)
############### Sampling method. ##################
# Systematic sampling method on a data.frame.     #
# n (sample size) has to provided as a parameter. #
#                                                 #
# Author: Luis Capelo | capelo@un.org             #
#                                                 #
###################################################
rw.sample <- function(df = NULL, n = NULL) {
# Creating an `id` column.
id.creator <- function(df = NULL) {
a <- data.frame(1)
for (i in 1:nrow(df)) {
x <- i
a <- rbind(a, x)
}
a <- data.frame(a[1:nrow(a)-1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
# Create progress bar.
total <- ceiling(count/limit)
pb <- txtProgressBar(min = 0, max = total, style = 3)
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
if (((x + n) > nrow(df)) == FALSE) {
x <- x + n
}
if (((x + n) > nrow(df)) == TRUE) {
x <- ((x + n) - nrow(df))
}
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
sample.09 <- rw.sample(df = data.09, n = 245)
############### Sampling method. ##################
# Systematic sampling method on a data.frame.     #
# n (sample size) has to provided as a parameter. #
#                                                 #
# Author: Luis Capelo | capelo@un.org             #
#                                                 #
###################################################
rw.sample <- function(df = NULL, n = NULL) {
# Creating an `id` column.
id.creator <- function(df = NULL) {
print("Creatign `id` columns.")
# Create progress bar.
total <- ceiling(count/limit)
pb <- txtProgressBar(min = 0, max = total, style = 3)
a <- data.frame(1)
for (i in 1:nrow(df)) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
x <- i
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a[1:nrow(a)-1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
print("Creatign `id` columns.")
# Create progress bar.
total <- ceiling(count/limit)
pb <- txtProgressBar(min = 0, max = total, style = 3)
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
if (((x + n) > nrow(df)) == FALSE) {
x <- x + n
}
if (((x + n) > nrow(df)) == TRUE) {
x <- ((x + n) - nrow(df))
}
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
sample.09 <- rw.sample(df = data.09, n = 245)
############### Sampling method. ##################
# Systematic sampling method on a data.frame.     #
# n (sample size) has to provided as a parameter. #
#                                                 #
# Author: Luis Capelo | capelo@un.org             #
#                                                 #
###################################################
rw.sample <- function(df = NULL, n = NULL) {
# Creating an `id` column.
id.creator <- function(df = NULL) {
print("Creatign `id` columns.")
# Create progress bar.
total <- ceiling(1/nrow(df))
pb <- txtProgressBar(min = 0, max = total, style = 3)
a <- data.frame(1)
for (i in 1:nrow(df)) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
x <- i
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a[1:nrow(a)-1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
print("Creatign `id` columns.")
# Create progress bar.
total <- ceiling(1/nrow(df))
pb <- txtProgressBar(min = 0, max = total, style = 3)
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
if (((x + n) > nrow(df)) == FALSE) {
x <- x + n
}
if (((x + n) > nrow(df)) == TRUE) {
x <- ((x + n) - nrow(df))
}
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
sample.09 <- rw.sample(df = data.09, n = 245)
############### Sampling method. ##################
# Systematic sampling method on a data.frame.     #
# n (sample size) has to provided as a parameter. #
#                                                 #
# Author: Luis Capelo | capelo@un.org             #
#                                                 #
###################################################
rw.sample <- function(df = NULL, n = NULL) {
# Creating an `id` column.
id.creator <- function(df = NULL) {
print("Creatign `id` columns.")
# Create progress bar.
total <- nrow(df)
pb <- txtProgressBar(min = 0, max = total, style = 3)
a <- data.frame(1)
for (i in 1:nrow(df)) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
x <- i
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a[1:nrow(a)-1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
print("Creatign `id` columns.")
# Create progress bar.
total <- nrow(df)
pb <- txtProgressBar(min = 0, max = total, style = 3)
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
if (((x + n) > nrow(df)) == FALSE) {
x <- x + n
}
if (((x + n) > nrow(df)) == TRUE) {
x <- ((x + n) - nrow(df))
}
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
sample.09 <- rw.sample(df = data.09, n = 245)
############### Sampling method. ##################
# Systematic sampling method on a data.frame.     #
# n (sample size) has to provided as a parameter. #
#                                                 #
# Author: Luis Capelo | capelo@un.org             #
#                                                 #
###################################################
rw.sample <- function(df = NULL, n = NULL) {
# Creating an `id` column.
id.creator <- function(df = NULL) {
print("Creatign 'id' columns -- using a highly inefficient method.")
# Create progress bar.
total <- nrow(df)
pb <- txtProgressBar(min = 0, max = total, style = 3)
a <- data.frame(1)
for (i in 1:nrow(df)) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
x <- i
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a[1:nrow(a)-1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
print("Sampling.")
# Create progress bar.
total <- nrow(df)
pb <- txtProgressBar(min = 0, max = total, style = 3)
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
if (((x + n) > nrow(df)) == FALSE) {
x <- x + n
}
if (((x + n) > nrow(df)) == TRUE) {
x <- ((x + n) - nrow(df))
}
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
