d
# Number of rows
nrow(d)
# Number of columns
ncol(d)
# Check the attributes
attributes(d)
# Call a particular cell in a dataframe
d[2,1]
d[1,2]
# Display dataframe
View(d)
# Edit dataframe
edit(d)
# Getting help on a function
?functionname
?edi
?edit
# Load package
library(psych)
# Download and install packages
install.packages("psych") ## Need to specify CRAN the 1st time
# Load package
library(psych)
install.packages(c("class", "colorspace", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "Zelig"))
packages()
packages()
?library
library()
?data.frame
numbers=c[1:10]
numbers=c(1:10)
numbers
words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
words
d=data.frame(subjectID=1:10, numbers=c(numbers), words=c(words))
d
d=data.frame(numbers=c(numbers), words=c(words))
d
nw=data.frame(numbers=c(numbers), words=c(words))
nw
attributes(nw)
numbers=c(1:10)
words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
nw=data.frame(numbers=c(numbers), words=c(words))
attributes(nw)
nw[8]
nw[8,1]
nw[8,1]
nw[8,2]
nw[8,2]
a=matrix(1:10)
a
dim(a)=c(2,3)
dim(a)=c(2,5)
a
dim(a)=c(2,5)
a
x=c(1:6)
y=c(5:10)
x
y
cbind(x,y)
rbind(x,y)
x=c(1:6)
y=c(5:10)
rbind(x,y)
x=c(1:6)
y=c(5:10)
cbind(x,y)
install.package(car)
install.packages(r)
install.packages(car)
?install.packages
?libraries
?library
library(car)
library()
library()
?data.frame
numbers=c(1:10)
words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
nw=data.frame(numbers=c(numbers),words=c(words))
attributes(nw)
nw
d=[2,8]
nw[2,8]
d[2,8]
nw
nw[1,8]
nw[8,1]
nw[1,8]
nw[8,2]
a=matrix(1:10)
dim(a)=c(2,5)
a
a=matrix(1:10)
dim(a)=c(2,5)
a
rbind(x,y)
cbind(x,y)
?install.packages
?install.packages("car")
install.packages("car")
search()
packages("car")
installpackages("car")
install.packages("car")
library(car)
library()
search()
library()
search()
numbers=c(1:10)
words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
nw=data.frame(numbers=c(numbers),words=c(words))
attributes(nw)
nw
a=matrix(1:10)
dim(a)=c(2,5)
a
x=c(1:6)
y=c(5:10)
rbind(x,y)
cbind(x,y)
numbers=c(1:10), words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten"), nw=data.frame(numbers=c(numbers),words=c(words)), attributes(nw)
dim=(a=(matrix(1:10))=c(2,5)
dim(a=(matrix(1:10))=c(2,5)
dim(matrix(1:10)=c(2,5)
dim(matrix(1:10)=(2,5)
dim(matrix(1:10)
(2,5)
a=dim(matrix(1:10))
a
a=dim(matrix(1:10))=c(2,5)
a=dim(matrix(1:10))=c(2,5)
a=dim(matrix(1:10))=(2,5)
a=matrix(1:10)
dim(a)=c(2,5)
a
a=matrix(1:10)
a
a=matrix(1:2,3:4,4:5,5:6,7:8,9:10)
m=matrix(1:6,2,3)
m
a=matrix(1:10,2,5)
a
hist(x)
x <- rnorm(100)
hist(x)
?open
ls
cd
?open
open.file
?open(file)
?open(file = "csv.scv")
open(file = "csv.scv")
open(file="csv.scv")
install.package("wnominate")
install.packages("wnominate")
t <- c("humanitariandata")
nchar(t)
WDIsearch('population')
library(WDI)
WDIsearch('population')
WDIsearch('population total')
WDIsearch('population')
WDIsearch('Population, millions')
data <- WDI(indicator="SPPOPTOTL", country=c('SO'), start=1960, end=2013)
data <- WDI(indicator='SPPOPTOTL', country=c('SO'), start=1960, end=2013)
data <- WDI(indicator='SPPOPTOTL', country=c('SY'), start=1960, end=2013)
WDIserach('SPPOPTOTL')
WDIsearch('SPPOPTOTL')
WDIsearch('population millions')
WDIsearch('Population, millions')
WDIsearch('SPPOPTOTL')
data <- WDI(indicator='SPPOPTOTL', country=c('SY'), start=1960, end=2012)
library(WDI)
WDI(indicator='SP.POP.TOTL', country=c('SO'), start=1960, end=2013)
data <- WDI(indicator='SP.POP.TOTL', country=c('SO'), start=1960, end=2013)
ggplot(data, (x=year, y=SP.POP.TOTL))
ggplot(data, aes(x=year, y=SP.POP.TOTL))
library(ggplot2)
ggplot(data, aes(x=year, y=SP.POP.TOTL))
ggplot(data, aes(x=SP.POP.TOTL, y=year))
ggplot(data, aes(year, SP.POP.TOTL))
ggplot(data, aes(year, SP.POP.TOTL)) + geom.line()
ggplot(data, aes(year, SP.POP.TOTL)) + geom_line()
View(data)
install.packages("RCURL")
install.packages("RCurl")
install.packages("lubridate")
install.packages('shiny')
install.packages('tester')
library(tester)
is_positive(1)
is_integer('banana')
is_matrix(x)
install.packages('rcharts')
require(devtools)
install.package('devtools')
install.packages('devtools')
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages('slidify')
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install.packages('rattle')
install.packages('dplyr')
library(dplyr)
install.packages("RSQLite")
install.packages("RSQLite.extfuns")
library(quandl)
library(ggplot2)
library(Quandl)
Quandl.auth("eLH9q92jjXUb8xy6fysX") # adding my API key to the function.
Quandl.auth("eLH9q92jjXUb8xy6fysX") # adding my API key to the function.
library(devtools)
install_github('rWBclimate', 'ropensci')
View(syria)
install.packages(' ggthemes')
install.packages('ggthemes')
help.stary()
help.start()
stock <- "MSFT"
start.date <- "2006-01-12"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock, "&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
stock.data <- transform(stock.data,
week = as.POSIXlt(Date)$yday %/% 7 + 1,
wday = as.POSIXlt(Date)$wday,
year = as.POSIXlt(Date)$year + 1900)
library(ggplot2)
ggplot(stock.data, aes(week, wday, fill = Adj.Close)) +
geom_tile(colour = "white") +
scale_fill_gradientn(colours = c("#D61818","#FFAE63","#FFFFBD","#B5E384")) +
facet_wrap(~ year, ncol = 1)
############### Sampling method. ##################
# Systematic sampling method on a data.frame.     #
# n (sample size) has to provided as a parameter. #
#                                                 #
# Author: Luis Capelo | capelo@un.org             #
#                                                 #
###################################################
rw.sample <- function(df = NULL, n = NULL) {
N <- nrow(df)
int <- (N / n)
# Creating an `id` column.
id.creator <- function(df = NULL) {
print("Creatign 'id' columns -- using a highly inefficient method.")
# Create progress bar.
pb <- txtProgressBar(min = 0, max = N, style = 3)
a <- data.frame(1)
for (i in 1:nrow(df)) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
x <- i
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a[1:nrow(a) - 1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
print("Sampling.")
# Create progress bar.
pb <- txtProgressBar(min = 0, max = N, style = 3)
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
if (((x + int) > nrow(df)) == FALSE) {
x <- x + int
}
if (((x + int) > nrow(df)) == TRUE) {
x <- ((x + int) - nrow(df))
}
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
setwd("~/Documents/Programming/ocha-chd")
library(ggplot2)
library(scales)
library(lubridate)
data <- read.csv('data/all-entries.csv')
data$created <- as.Date(data$created)
data <- data[order(data$created),]
data.13 <- subset(data, year(data$created) == year(dmy("01-01-2013")))
data.12 <- subset(data, year(data$created) == year(dmy("01-01-2012")))
data.11 <- subset(data, year(data$created) == year(dmy("01-01-2011")))
data.10 <- subset(data, year(data$created) == year(dmy("01-01-2010")))
data.09 <- subset(data, year(data$created) == year(dmy("01-01-2009")))
# Ordering each year.
data.13 <- data.13[order(data.13$created),]
data.12 <- data.12[order(data.12$created),]
data.11 <- data.11[order(data.11$created),]
data.10 <- data.10[order(data.10$created),]
data.09 <- data.09[order(data.09$created),]
sample.10 <- rw.sample(df = data.10, n = 245)
sample.10 <- rw.sample(df = data.10, n = 250)
############### Sampling method. ##################
# Systematic sampling method on a data.frame.     #
# n (sample size) has to provided as a parameter. #
#                                                 #
# Author: Luis Capelo | capelo@un.org             #
#                                                 #
###################################################
rw.sample <- function(df = NULL, n = NULL) {
N <- nrow(df)
int <- ceiling(N / n)
# Creating an `id` column.
id.creator <- function(df = NULL) {
print("Creatign 'id' columns -- using a highly inefficient method.")
# Create progress bar.
pb <- txtProgressBar(min = 0, max = N, style = 3)
a <- data.frame(1)
for (i in 1:nrow(df)) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
x <- i
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a[1:nrow(a) - 1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
print("Sampling.")
# Create progress bar.
pb <- txtProgressBar(min = 0, max = N, style = 3)
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
if (((x + int) > nrow(df)) == FALSE) {
x <- x + int
}
if (((x + int) > nrow(df)) == TRUE) {
x <- ((x + int) - nrow(df))
}
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
sample.10 <- rw.sample(df = data.10, n = 250)
############### Sampling method. ##################
# Systematic sampling method on a data.frame.     #
# n (sample size) has to provided as a parameter. #
#                                                 #
# Author: Luis Capelo | capelo@un.org             #
#                                                 #
###################################################
rw.sample <- function(df = NULL, n = NULL) {
N <- nrow(df)
int <- ceiling(N / n)
# Creating an `id` column.
id.creator <- function(df = NULL) {
print("Creatign 'id' columns -- using a highly inefficient method.")
# Create progress bar.
pb <- txtProgressBar(min = 0, max = N, style = 3)
a <- data.frame(1)
for (i in 1:nrow(df)) {
#       Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
x <- i
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a[1:nrow(a) - 1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
print("Sampling.")
# Create progress bar.
pb <- txtProgressBar(min = 0, max = N, style = 3)
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
Sys.sleep(0.1)
# Update progress bar.
setTxtProgressBar(pb, i)
if (((x + int) > nrow(df)) == FALSE) {
x <- x + int
}
if (((x + int) > nrow(df)) == TRUE) {
x <- ((x + int) - nrow(df))
}
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
sample.10 <- rw.sample(df = data.10, n = 250)
sample.09 <- rw.sample(df = data.09, n = 250)
View(sample.09)
View(sample.10)
203- 8
############### Sampling method. ##################
# Systematic sampling method on a data.frame.     #
# n (sample size) has to provided as a parameter. #
#                                                 #
# Author: Luis Capelo | capelo@un.org             #
#                                                 #
###################################################
rw.sample <- function(df = NULL, n = NULL) {
N <- nrow(df)
int <- ceiling(N / n)
# Creating an `id` column.
id.creator <- function(df = NULL) {
print("Creating 'id' columns -- using a highly inefficient method.")
# Create progress bar.
pb <- txtProgressBar(min = 0, max = N, style = 3)
a <- data.frame(1)
for (i in 1:nrow(df)) {
# Update progress bar.
setTxtProgressBar(pb, i)
x <- i
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a[1:nrow(a) - 1,])
df <- cbind(a, df)
colnames(df)[1] <- "id"
return(df)
}
df <- id.creator(df = df)
# Function for sampling.
sampler <- function(df = NULL) {
print("Sampling.")
# Create progress bar.
pb <- txtProgressBar(min = 0, max = N, style = 3)
a <- data.frame()
x <- as.numeric(df$id[sample(nrow(df), 1)])
for (i in 1:n) {
# Update progress bar.
setTxtProgressBar(pb, i)
if (((x + int) > nrow(df)) == FALSE) {
x <- x + int
}
if (((x + int) > nrow(df)) == TRUE) {
x <- ((x + int) - nrow(df))
}
a <- rbind(a, x)
}
close(pb)
a <- data.frame(a)
colnames(a)[1] <- "id"
a <- merge(df, a)
return(a)
}
a <- sampler(df = df)
return(a)
}
sample.13 <- rw.sample(df = data.13, n = 220)
View(sample.13)
?row.names
?write.csv
write.csv(sample.13, file = 'data/sample.13.csv', row.names = FALSE)
write.csv(sample.10, file = 'data/sample.13.csv', row.names = FALSE)
write.csv(sample.09, file = 'data/sample.13.csv', row.names = FALSE)
write.csv(sample.13, file = 'data/sample.13.csv', row.names = FALSE)
write.csv(sample.09, file = 'data/sample.09.csv', row.names = FALSE)
write.csv(sample.10, file = 'data/sample.10.csv', row.names = FALSE)
